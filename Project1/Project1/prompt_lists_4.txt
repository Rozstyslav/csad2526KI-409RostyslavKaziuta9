create ci.cmd file with next parameters: creating and building new directory (mkdir build), go to the directory (cd build), configurating project with CMake (cmake ..), building project (cmake --build .),  ensure execution rights (chmod +x build.sh)


@echo off
setlocal enabledelayedexpansion

REM CI build script — run from repository root

REM Create build directory if missing and enter it
if not exist "build" (
    mkdir "build"
)
cd /d "build" || (echo Failed to enter build directory & exit /b 1)

REM Configure the project using CMake
cmake ..
if errorlevel 1 (
    echo CMake configuration failed.
    exit /b 1
)

REM Build the project
cmake --build .
if errorlevel 1 (
    echo Build failed.
    exit /b 1
)

REM Run tests via CTest (show failures)
ctest --output-on-failure
if errorlevel 1 (
    echo Some tests failed.
    exit /b 1
)

echo CI script completed successfully.
exit /b 0


create ci.sh

#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

echo "CI build script — run from repository root"

# Create build directory if missing and enter it
mkdir -p build
cd build || { echo "Failed to enter build directory" >&2; exit 1; }

# Configure the project using CMake
echo "Configuring with CMake..."
cmake .. || { echo "CMake configuration failed." >&2; exit 1; }

# Build the project
echo "Building..."
cmake --build . || { echo "Build failed." >&2; exit 1; }

# Ensure execution rights for build.sh if present (repo root or build directory)
if [ -f ../build.sh ]; then
  chmod +x ../build.sh && echo "Made ../build.sh executable"
fi
if [ -f ./build.sh ]; then
  chmod +x ./build.sh && echo "Made build.sh executable"
fi

# Run tests via CTest (show failures)
echo "Running tests..."
ctest --output-on-failure || { echo "Some tests failed." >&2; exit 1; }

echo "CI script completed successfully."
exit 0

rewrite CMakeLists.txt

cmake_minimum_required(VERSION 3.10)

project(lab1 VERSION 1.0 LANGUAGES CXX)

# Compiler settings
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Optionally disable tests from being configured
option(BUILD_TESTS "Build unit tests" ON)

# Build the main library from the implementation so it can be linked by targets
add_library(math_operations STATIC
  math_operations.cpp
)
target_include_directories(math_operations
  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}
)

# Main executable
add_executable(lab1
  main.cpp
)
target_link_libraries(lab1
  PRIVATE math_operations
)

# Unit tests
if(BUILD_TESTS)
  enable_testing()
  include(FetchContent)

  FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/refs/heads/main.zip
    # Ensure extracted files get the timestamp of extraction (avoids CMP0135 warning)
    DOWNLOAD_EXTRACT_TIMESTAMP TRUE
  )
  # For Windows: Prevent overriding the parent project's compiler/linker settings
  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
  FetchContent_MakeAvailable(googletest)

  add_executable(unit_tests
    unit_tests.cpp
  )
  target_link_libraries(unit_tests
    PRIVATE gtest_main math_operations
  )

  # Register the test with CTest and enable GoogleTest discovery integration
  include(GoogleTest)
  gtest_discover_tests(unit_tests)
  add_test(NAME UnitTests COMMAND unit_tests)
endif()




