create a directory .github/workflows/. In it, create a file ci.yml.

name: C++ CI

on:
  push:
    branches: [ main, master, "feature/**" ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Visual Studio shell
      uses: microsoft/setup-msbuild@v1.1

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --config Release

    - name: Test
      working-directory: build
      run: |
        ctest -C Release --output-on-failure

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build/**/*.exe
          build/**/*.pdb

make this changes for ci.yml Trigger: Trigger the action on a push or pull request to a branch containing, develop or master in its name. Job: Create one Job (e.g., cross_build). Strategy: Use a matrix (strategy: matrix) to run the build on three operating systems: runs-on: ubuntu-latest (Linux), runs-on: windows-latest (Windows), runs-on: macos-latest (macOS), Steps: Each build must include the following steps: Code checkout (actions/checkout@v4)., CMake installation (if necessary). Run configuration and build commands. Deploy

name: C++ cross-platform CI

on:
  push:
    branches:
      - '*develop*'
      - '*master*'
  pull_request:
    branches:
      - '*develop*'
      - '*master*'

jobs:
  cross_build:
    name: Cross-platform build and test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      CMAKE_BUILD_TYPE: Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Ensure CMake (Linux / macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if ! command -v cmake >/dev/null 2>&1; then
          echo "CMake not found — installing..."
          if [ "$(uname)" = "Darwin" ]; then
            brew update
            brew install cmake
          else
            sudo apt-get update
            sudo apt-get install -y cmake
          fi
        else
          echo "CMake found: $(cmake --version | head -n 1)"
        fi

    - name: Ensure CMake (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
          Write-Host 'CMake not found — installing via choco...'
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        } else {
          cmake --version
        }

    - name: Configure (CMake)
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}

    - name: Build
      run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure -C ${{ env.CMAKE_BUILD_TYPE }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: |
          build/**